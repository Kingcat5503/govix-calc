# Project: DualCalc Linux Desktop App (Python + PySide6)
# Modularized structure: separates core UI, logic, and settings; fixed decorator error and add functions

# Directory Structure:
# dualcalc_linux_py/
# ├── main.py           # Application entry point
# ├── ui.py             # UI layout and event wiring
# ├── logic.py          # Calculation and input validation
# ├── settings.py       # Settings dialog implementation
# ├── requirements.txt
# └── README.md

# 1. requirements.txt
PySide6>=6.5.0

# 2. README.md
"""
DualCalc Linux Desktop App

Run:
    pip install -r requirements.txt
    python main.py
"""

# 3. logic.py
import re

# Allow digits, operators, decimal, parentheses, percent, sign
SAFE_EXPR = re.compile(r"^[0-9+\-*/().%±]*$")

def safe_eval(expr: str) -> str:
    """Validate and evaluate expression, return result or 'Error'."""
    if not SAFE_EXPR.match(expr):
        return 'Error'
    try:
        result = eval(expr, {'__builtins__': None}, {})
        return str(result)
    except:
        return 'Error'

def toggle_sign(expr: str) -> str:
    return expr[1:] if expr.startswith('-') else ('-' + expr if expr else expr)

def calc_percent(expr: str) -> str:
    try:
        return str(float(expr) / 100)
    except:
        return 'Error'

# 4. settings.py
from PySide6.QtWidgets import (QDialog, QVBoxLayout, QLabel, QRadioButton, QPushButton, QButtonGroup)
from PySide6.QtCore import Qt

class SettingsDialog(QDialog):
    def __init__(self, parent=None, current_theme='dark'):
        super().__init__(parent)
        self.setWindowTitle('Settings')
        self.setWindowModality(Qt.ApplicationModal)
        self.resize(300, 200)

        if current_theme == 'light':
            self.setStyleSheet("""
                QDialog { background: #f0f0f0; }
                QLabel, QRadioButton, QPushButton { color: #000000; }
            """)

        layout = QVBoxLayout()
        layout.addWidget(QLabel('Select Theme:'))
        self.theme_group = QButtonGroup(self)
        self.dark_radio = QRadioButton('Dark')
        self.light_radio = QRadioButton('Light')
        self.theme_group.addButton(self.dark_radio)
        self.theme_group.addButton(self.light_radio)
        layout.addWidget(self.dark_radio)
        layout.addWidget(self.light_radio)
        self.dark_radio.setChecked(current_theme!='light')
        self.light_radio.setChecked(current_theme=='light')

        layout.addWidget(QLabel('\nAbout DualCalc Linux:'))
        about = QLabel('Version 0.1.\nDeveloped with ❤️ using Python & PySide6')
        about.setWordWrap(True)
        layout.addWidget(about)

        close_btn = QPushButton('Close')
        close_btn.clicked.connect(self.accept)
        layout.addWidget(close_btn, alignment=Qt.AlignRight)

        self.setLayout(layout)

    def selected_theme(self) -> str:
        return 'light' if self.light_radio.isChecked() else 'dark'

# 5. ui.py
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QPushButton, QGridLayout, QSizePolicy)
from PySide6.QtCore import Qt, Slot, QEvent
from logic import safe_eval, toggle_sign, calc_percent
from settings import SettingsDialog

class DualCalcUI(QWidget):
    def __init__(self):
        super().__init__()
        self.theme = 'dark'
        self.focused = 'left'
        self.setWindowTitle('DualCalc Linux')
        self.setMinimumSize(600, 600)
        self.apply_theme()
        self.build_ui()

    def apply_theme(self):
        # Updated dynamic and stylish themes using gradients and rounded corners
        if self.theme == 'light':
            self.setStyleSheet("""
                QWidget { background: #f0f0f0; }
                QLineEdit {
                    background: #ffffff; color: #000000;
                    font-size: 24px; padding: 8px;
                    border: 2px solid #cccccc; border-radius: 8px;
                }
                QPushButton {
                    font-size: 18px; border: none;
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #fafafa, stop:1 #e0e0e0);
                    color: #000000;
                    border-radius: 8px; padding: 10px;
                }
                QPushButton:hover { background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #e5e5e5, stop:1 #d0d0d0); }
                QPushButton:pressed { background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #d5d5d5, stop:1 #c0c0c0); }
            """)
        else:
            self.setStyleSheet("""
                QWidget { background: #2b2b2b; }
                QLineEdit {
                    background: #3c3f41; color: #ffffff;
                    font-size: 24px; padding: 8px;
                    border: 2px solid #555555; border-radius: 8px;
                }
                QPushButton {
                    font-size: 18px; border: none;
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #6a6a6a, stop:1 #555555);
                    color: #ffffff;
                    border-radius: 8px; padding: 10px;
                }
                QPushButton:hover { background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #7a7a7a, stop:1 #666666); }
                QPushButton:pressed { background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #5a5a5a, stop:1 #444444); }
            """)

    def build_ui(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(20)
        top_bar = QHBoxLayout()
        top_bar.setSpacing(10)
        top_bar.addStretch()
        self.settings_btn = QPushButton('⚙')
        self.settings_btn.setFixedSize(36, 36)
        self.settings_btn.setStyleSheet("border-radius: 18px; background: transparent; color: inherit;")
        self.settings_btn.clicked.connect(self.open_settings)
        top_bar.addWidget(self.settings_btn)
        layout.addLayout(top_bar)

        panels = QHBoxLayout()
        panels.setSpacing(20)
        self.left_display = QLineEdit(); self.setup_display(self.left_display)
        self.right_display = QLineEdit(); self.setup_display(self.right_display)
        action_layout = QVBoxLayout()
        action_layout.setSpacing(15)
        action_layout.setContentsMargins(0,50,0,50)
        self.btn_lr_copy = QPushButton('Copy →')
        self.btn_rl_copy = QPushButton('← Copy')
        self.btn_lr_add = QPushButton('Add →')
        self.btn_rl_add = QPushButton('← Add')
        self.btn_lr_copy.clicked.connect(self.copy_left_to_right)
        self.btn_rl_copy.clicked.connect(self.copy_right_to_left)
        self.btn_lr_add.clicked.connect(self.add_left_to_right)
        self.btn_rl_add.clicked.connect(self.add_right_to_left)
        for btn in [self.btn_lr_copy, self.btn_lr_add, self.btn_rl_add, self.btn_rl_copy]:
            btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
            action_layout.addWidget(btn)
        panels.addWidget(self.left_display)
        panels.addLayout(action_layout)
        panels.addWidget(self.right_display)
        layout.addLayout(panels)

        keys = [
            ('C',0,0),('±',0,1),('%',0,2),('←',0,3),
            ('7',1,0),('8',1,1),('9',1,2),('/',1,3),
            ('4',2,0),('5',2,1),('6',2,2),('*',2,3),
            ('1',3,0),('2',3,1),('3',3,2),('-',3,3),
            ('0',4,0,1,2),('.',4,2),('+',4,3),
            ('(',5,0),(')',5,1),('=',5,2,1,2)
        ]
        grid = QGridLayout()
        for key in keys:
            text = key[0]
            row = key[1]
            col = key[2]
            rowspan = key[3] if len(key) > 3 else 1
            colspan = key[4] if len(key) > 4 else 1
            btn = QPushButton(text)
            btn.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
            btn.clicked.connect(lambda _, t=text: self.on_key(t))
            grid.addWidget(btn, row, col, rowspan, colspan)
        layout.addLayout(grid)
        self.setLayout(layout)

    def setup_display(self, disp):
        disp.setReadOnly(True)
        disp.setAlignment(Qt.AlignRight)
        disp.setFixedHeight(60)
        disp.installEventFilter(self)

    def eventFilter(self, source, event):
        if event.type() == QEvent.FocusIn:
            if source == self.left_display:
                self.focused = 'left'
            elif source == self.right_display:
                self.focused = 'right'
        return super().eventFilter(source, event)

    @Slot()
    def on_key(self, key):
        disp = self.left_display if self.focused=='left' else self.right_display
        txt = disp.text()
        if key=='C': disp.clear()
        elif key=='←': disp.setText(txt[:-1])
        elif key=='±': disp.setText(toggle_sign(txt))
        elif key=='%': disp.setText(calc_percent(txt))
        elif key=='=': disp.setText(safe_eval(txt))
        else: disp.setText(txt+key)

    @Slot()
    def copy_left_to_right(self):
        self.right_display.setText(self.left_display.text())

    @Slot()
    def copy_right_to_left(self):
        self.left_display.setText(self.right_display.text())

    @Slot()
    def add_left_to_right(self):
        self.right_display.setText(self.right_display.text() + self.left_display.text())

    @Slot()
    def add_right_to_left(self):
        self.left_display.setText(self.left_display.text() + self.right_display.text())

    @Slot()
    def open_settings(self):
        dlg = SettingsDialog(self, current_theme=self.theme)
        if dlg.exec():
            new_theme = dlg.selected_theme()
            if new_theme != self.theme:
                self.theme = new_theme
                self.apply_theme()

# 6. main.py
from PySide6.QtWidgets import QApplication
from ui import DualCalcUI
import sys

if __name__=='__main__':
    app = QApplication(sys.argv)
    window = DualCalcUI()
    window.left_display.setFocus()
    window.show()
    sys.exit(app.exec())
